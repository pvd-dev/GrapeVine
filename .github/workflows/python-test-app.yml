# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Testing Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read
env:
  AWS_REGION: eu-central-1
  AWS_LIGHTSAIL_SERVICE_NAME: franklyapp

jobs:
  flake8Linter:
    runs-on: ubuntu-latest
    needs: [SnykCodescan, Bandit-Scan, dependency-review, ScanSensitiveData]
    concurrency: 
      group: tests
      
    strategy:
      matrix:
        python-version: [ '3.8', '3.10.4']
        #python-version: ['3.x']
    name: Python ${{ matrix.python-version }} Linter
    steps:
    - uses: actions/checkout@v3
    - name: Install AWS Client
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install || true
        aws --version
        curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "lightsailctl"
        sudo mv "lightsailctl" "/usr/local/bin/lightsailctl"
        sudo chmod +x /usr/local/bin/lightsailctl
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ env.AWS_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Running the server for tests
      run: |
          pip install -r requirements.txt
          aws s3 cp s3://franklyappsecret/Env_Settings.cfg .
    # python3 developmentserver.py
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade pip
        pip install playwright
        playwright install
        pip install flake8 pytest               
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  pytest:
    runs-on: ubuntu-latest
    needs: [SnykCodescan, Bandit-Scan, dependency-review, ScanSensitiveData]
    concurrency: 
      group: tests
      
    strategy:
      matrix:
        python-version: [ '3.8', '3.10.4']
    name: Python ${{ matrix.python-version }} sample
        #python-version: ['3.x']
    steps:
    - uses: actions/checkout@v3
    - name: Install AWS Client
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install || true
        aws --version
        curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "lightsailctl"
        sudo mv "lightsailctl" "/usr/local/bin/lightsailctl"
        sudo chmod +x /usr/local/bin/lightsailctl
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ env.AWS_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Running the server for tests
      run: |
          pip install -r requirements.txt
          aws s3 cp s3://franklyappsecret/Env_Settings.cfg .
    # python3 developmentserver.py
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade pip
        pip install playwright
        playwright install
        pip install flake8 pytest               

    - name: Test with pytest
      run: |
            pytest
    
  
  Bandit-Scan:
    name: Scanning Python code
    runs-on: ubuntu-latest
    concurrency: 
      group: codescan
    
    steps:
    # Checkout the code from GitHub
      - uses: actions/checkout@v2
    # Runs a pre configured Bandit scan 
      - name: Run bandit
        uses: jpetrucciani/bandit-check@master
        with:
        # only scans under this path
          path: './website'

  SnykCodescan:
    name: Scan code with Snyk
    runs-on: ubuntu-latest
    concurrency: 
        group: codescan
        
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
  
  dependency-review:
    name: Scan dependancies
    runs-on: ubuntu-latest
    concurrency: 
      group: Security
      
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - uses: homoluctus/pip-audit-action@v1
      with:
        type: pip

    - uses: homoluctus/pip-audit-action@v1
      with:
        type: pip


  playwright:
    runs-on: ubuntu-latest
    needs: [SnykCodescan, Bandit-Scan, dependency-review, ScanSensitiveData]
    concurrency: 
      group: tests
      
    strategy:
      matrix:
        browser-version: [ 'Chrome', 'Webkit', 'Edge']
    name: Testing browser ${{ matrix.browser-version }}
    steps:
    - run: echo ${{ matrix.browser-version }}
    - run: echo "Placeholder for playwright"

  ScanSensitiveData:
    name: Scanning for sensitive data
    runs-on: ubuntu-18.04
    concurrency: 
      group: Security
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Detect secrets with Talisman in incoming commits
      uses: carhartl/talisman-secrets-scan-action@v1.2.1
      

  Finishingtests:
      name: Sending success notification
      runs-on: ubuntu-latest
      concurrency: 
        group: done
      needs: [ pytest, playwright, flake8Linter]
      steps:
      - run: echo "all done!"

  MinorRelease:
      name: Releasing to Production
      runs-on: ubuntu-latest
      concurrency: 
        group: done
      needs: [ pytest, playwright, flake8Linter]
      steps:
      - uses: actions/checkout@v2
      - uses: ncipollo/release-action@v1
        with:
          bodyFile: "readme.md"
          token: ${{ secrets.GITHUB_TOKEN }}